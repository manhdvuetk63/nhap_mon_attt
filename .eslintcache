[{"C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\index.tsx":"1","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\reportWebVitals.ts":"2","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\App.tsx":"3","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\rsa\\SignRSA.tsx":"4","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\rsa\\SignRSACheck.tsx":"5","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\rsa\\Modulo.tsx":"6","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\rsa\\RSA.tsx":"7","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\elgamal\\Elgamal.tsx":"8","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\elgamal\\SignElgamalCheck.tsx":"9","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\elliptic\\Elliptic.tsx":"10","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\elgamal\\EncryptElgamal.tsx":"11","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\elgamal\\SignElgamal.tsx":"12","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\utils\\elliptic.js":"13","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\utils\\extendedEuclid.ts":"14"},{"size":721,"mtime":1622816250737,"results":"15","hashOfConfig":"16"},{"size":440,"mtime":1622809830330,"results":"17","hashOfConfig":"16"},{"size":4031,"mtime":1622816486630,"results":"18","hashOfConfig":"16"},{"size":1979,"mtime":1622813835755,"results":"19","hashOfConfig":"16"},{"size":2915,"mtime":1622813835754,"results":"20","hashOfConfig":"16"},{"size":1670,"mtime":1622816419128,"results":"21","hashOfConfig":"16"},{"size":5852,"mtime":1622813222443,"results":"22","hashOfConfig":"16"},{"size":5632,"mtime":1622816855833,"results":"23","hashOfConfig":"16"},{"size":3551,"mtime":1622812947493,"results":"24","hashOfConfig":"16"},{"size":5650,"mtime":1622817089641,"results":"25","hashOfConfig":"16"},{"size":3030,"mtime":1622812923362,"results":"26","hashOfConfig":"16"},{"size":3903,"mtime":1622813265546,"results":"27","hashOfConfig":"16"},{"size":5057,"mtime":1622809830334,"results":"28","hashOfConfig":"16"},{"size":975,"mtime":1622809830335,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1demnyd",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\index.tsx",[],"C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\reportWebVitals.ts",[],["65","66"],"C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\App.tsx",["67","68","69","70","71","72","73","74","75","76","77","78","79","80","81"],"C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\rsa\\SignRSA.tsx",[],"C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\rsa\\SignRSACheck.tsx",[],"C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\rsa\\Modulo.tsx",["82"],"import { Button, Input, Space } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport bigInt from 'big-integer';\r\n\r\nconst ModuloCaculate = () => {\r\n  const [x, setX] = useState<any>();\r\n  const [y, setY] = useState<any>();\r\n  const [n, setN] = useState<any>();\r\n  const [e, setE] = useState<any>();\r\n\r\n  useEffect(() => {\r\n    if (!(x && e && n)) {\r\n      return;\r\n    }\r\n    try {\r\n      setY(bigInt(x).modPow(e, n).toString());\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [x, e, n]);\r\n\r\n  const reset = () => {\r\n    setE('');\r\n    setX('');\r\n    setY('');\r\n    setN('');\r\n  };\r\n\r\n  const autoFill = () => {\r\n    setX('123');\r\n    setE('2753');\r\n    setN('3233');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3 className='mb-4'>\r\n        <b>Tính mũ theo Modulo y = x ^ e mod n</b>\r\n      </h3>\r\n      <hr />\r\n      <Space className='w-100' direction='vertical' size='large'>\r\n        <Input\r\n          value={x}\r\n          onChange={(e) => setX(e.target.value)}\r\n          addonBefore='x'\r\n          placeholder='Enter x'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={e}\r\n          onChange={(e) => setE(e.target.value)}\r\n          addonBefore='e'\r\n          placeholder='Enter e'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={n}\r\n          onChange={(e) => setN(e.target.value)}\r\n          addonBefore='n'\r\n          placeholder='Enter n'\r\n          type='number'\r\n        />\r\n      </Space>\r\n      <hr />\r\n      <h3>\r\n        <b>y = {y || ''}</b>\r\n      </h3>\r\n      <hr />\r\n      <Button onClick={reset}>Clear All</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModuloCaculate;\r\n","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\rsa\\RSA.tsx",["83"],"import { Button, Input, Space } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { gcd } from '../utils/extendedEuclid';\r\nimport { BigNumber } from 'bignumber.js';\r\n// import * as bigintCryptoUtils from 'bigint-crypto-utils';\r\n// import * as bigintModArith from 'bigint-mod-arith';\r\nimport bigInt from 'big-integer';\r\n\r\nconst RSA = () => {\r\n  const [p, setP] = useState<any>();\r\n  const [q, setQ] = useState<any>();\r\n  const [m, setM] = useState<any>();\r\n  const [g, setG] = useState<any>();\r\n  const [d, setD] = useState<any>();\r\n  const [de, setDe] = useState<any>();\r\n  const [x, setX] = useState<any>();\r\n  const [y, setY] = useState<any>();\r\n  const [n, setN] = useState<any>();\r\n  const [e, setE] = useState<any>();\r\n\r\n  useEffect(() => {\r\n    if (!(p && q)) {\r\n      return;\r\n    }\r\n    try {\r\n      setN(new BigNumber(p).multipliedBy(q).toFixed());\r\n      setM(\r\n        new BigNumber(new BigNumber(p).minus(1))\r\n          .multipliedBy(new BigNumber(q).minus(1))\r\n          .toFixed()\r\n      );\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [p, q]);\r\n\r\n  useEffect(() => {\r\n    if (!(e && m)) {\r\n      return;\r\n    }\r\n    try {\r\n      setG(gcd(e, m));\r\n      setD(bigInt(e).modInv(m).toString());\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [e, m]);\r\n\r\n  useEffect(() => {\r\n    if (!(x && e && n)) {\r\n      return;\r\n    }\r\n    try {\r\n      setY(bigInt(x).modPow(e, n).toString());\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [x, e, n]);\r\n\r\n  useEffect(() => {\r\n    if (!(y && d && n)) {\r\n      return;\r\n    }\r\n    try {\r\n      setDe(bigInt(y).modPow(d, n).toString());\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [y, d, n]);\r\n\r\n  const reset = () => {\r\n    setP('');\r\n    setQ('');\r\n    setE('');\r\n    setX('');\r\n    setM('');\r\n    setG('');\r\n    setD('');\r\n    setDe('');\r\n    setY('');\r\n    setN('');\r\n  };\r\n\r\n  const autoFill = () => {\r\n    setX('123456789');\r\n    setP(\r\n      '60189309855228152582080418108842142489913101192853892029893420328887351871793'\r\n    );\r\n    setQ(\r\n      '74714197566136059701452833471216875182865235128709397697022189913844351225357'\r\n    );\r\n    setE(65537);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3 className='mb-4'>\r\n        <b>Xây dựng hệ mật RSA</b>\r\n      </h3>\r\n      <hr />\r\n      <Space className='w-100' direction='vertical' size='large'>\r\n        <Input\r\n          value={x}\r\n          onChange={(e) => setX(e.target.value)}\r\n          addonBefore='x'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={p}\r\n          onChange={(e) => setP(e.target.value)}\r\n          addonBefore='p'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={q}\r\n          onChange={(e) => setQ(e.target.value)}\r\n          addonBefore='q'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={e}\r\n          onChange={(e) => setE(e.target.value)}\r\n          addonBefore='e'\r\n          type='number'\r\n        />\r\n      </Space>\r\n      <hr />\r\n      <Space direction='vertical'>\r\n        <div>\r\n          <b>Bản rõ x = </b>\r\n          {x || ''}\r\n        </div>\r\n        <div>\r\n          <b>Bản mã y = </b>\r\n          {y || ''}\r\n        </div>\r\n        <div>\r\n          <b>p = </b>\r\n          {p || ''}\r\n        </div>\r\n        <div>\r\n          <b>q = </b>\r\n          {q || ''}\r\n        </div>\r\n        <div>\r\n          <b>Khóa công khai (e,n) = </b>({e || ''} , {n || ''}\r\n          )\r\n        </div>\r\n        <div>\r\n          <b>Khóa bí mật (d,n) = </b>({d || ''} , {n || ''})\r\n        </div>\r\n      </Space>\r\n      <hr />\r\n      <Space>\r\n        {p * q > 0 && (\r\n          <div>\r\n            <p>\r\n              <b>n = p * q = </b> {p} * {q} = {n}\r\n            </p>\r\n            <p>\r\n              <b>m = phi(n) = (p - 1)(q - 1) = </b>\r\n              {p - 1} * {q - 1} ={BigInt(m || 0).toString()}\r\n            </p>\r\n            <p>\r\n              <b>gcd(e, m)</b> = <code>{g}</code>\r\n            </p>\r\n            {g !== 1 && (\r\n              <b className='text-danger'>\r\n                <b> gcd(e, m) =</b> <code>{g} != 1</code> ==&gt; e được chọn\r\n                không thỏa mãn !\r\n              </b>\r\n            )}\r\n            {g === 1 && (\r\n              <div>\r\n                <p>\r\n                  Ta nhân thấy e được chọn thỏa mãn{' '}\r\n                  <b>\r\n                    <code>gcd(e, m) = 1</code>\r\n                  </b>\r\n                  .\r\n                </p>\r\n                <hr />\r\n                <h4>Bước 1: Thực hiện tính khóa bí mật d</h4>\r\n                <p>Áp dụng thuật toán Euclid mở rộng, ta có:</p>\r\n                <b>d = e ^ -1 mod m</b>= {e} ^ -1 mod {m} = {d}\r\n                {!x || x <= 0 ? (\r\n                  <div>\r\n                    <hr />\r\n                    <h4 className='text-danger'>Hãy nhập x &gt; 0 !!!</h4>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <hr />\r\n                    <h4>Bước 2: Mã hóa bản rõ x = {x}</h4>\r\n                    <p>\r\n                      <b>y = x ^ e mod n = </b>\r\n                      {x} ^ {e} mod {n} = {y}\r\n                    </p>\r\n                    <hr />\r\n                    <h4>Bước 3: Giải mã y khi biết d, n</h4>\r\n                    <p>\r\n                      <b>x = y ^ d mod n = </b>\r\n                      {y} ^{d} mod {n}\r\n                      <hr />\r\n                      <h4 className='text-danger'>\r\n                        <b>x = {de}</b>\r\n                      </h4>\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </Space>\r\n      <Button onClick={reset}>Clear All</Button>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RSA;\r\n","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\elgamal\\Elgamal.tsx",["84"],"C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\elgamal\\SignElgamalCheck.tsx",["85"],"import { Button, Input, Space } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport bigInt from 'big-integer';\r\n\r\nconst SignCheckElgamal = () => {\r\n  const [x, setX] = useState<any>();\r\n  const [p, setP] = useState<any>();\r\n  const [alpha, setAlpha] = useState<any>();\r\n  const [beta, setBeta] = useState<any>();\r\n  const [s1, setS1] = useState<any>();\r\n  const [s2, setS2] = useState<any>();\r\n  const [VT, setVT] = useState<any>();\r\n  const [VP, setVP] = useState<any>();\r\n  const [check, setCheck] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (!(beta && p && s1 && s2)) {\r\n      return;\r\n    }\r\n    try {\r\n      setVT(\r\n        bigInt(beta)\r\n          .modPow(s1, p)\r\n          .multiply(bigInt(s1).modPow(s2, p))\r\n          .mod(p)\r\n          .toString()\r\n      );\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [beta, p, s1, s2]);\r\n\r\n  useEffect(() => {\r\n    if (!(alpha && p && x)) {\r\n      return;\r\n    }\r\n    try {\r\n      setVP(bigInt(alpha).modPow(x, p).toString());\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [alpha, p, x]);\r\n\r\n  useEffect(() => {\r\n    if (!(VP && VT)) {\r\n      return;\r\n    }\r\n    try {\r\n      setCheck(VT === VP);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [VP, VT]);\r\n\r\n  const reset = () => {\r\n    setX('');\r\n    setP('');\r\n    setAlpha('');\r\n    setBeta('');\r\n    setS1('');\r\n    setS2('');\r\n  };\r\n\r\n  const autoFill = () => {\r\n    setX('2035');\r\n    setP('2357');\r\n    setAlpha('2');\r\n    setBeta('1185');\r\n    setS1('2012');\r\n    setS2('1605');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3 className='mb-4'>\r\n        <b>Kiểm tra chữ ký</b>\r\n      </h3>\r\n      <hr />\r\n      <Space className='w-100' direction='vertical' size='large'>\r\n        <Input\r\n          value={x}\r\n          onChange={(e) => setX(e.target.value)}\r\n          addonBefore='x'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={p}\r\n          onChange={(e) => setP(e.target.value)}\r\n          addonBefore='p'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={alpha}\r\n          onChange={(e) => setAlpha(e.target.value)}\r\n          addonBefore='alpha'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={beta}\r\n          onChange={(e) => setBeta(e.target.value)}\r\n          addonBefore='beta'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={s1}\r\n          onChange={(e) => setS1(e.target.value)}\r\n          addonBefore='s1'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={s2}\r\n          onChange={(e) => setS2(e.target.value)}\r\n          addonBefore='s2'\r\n          type='number'\r\n        />\r\n      </Space>\r\n      <hr />\r\n      <div>\r\n        <p>\r\n          <b>\r\n            Verify (x, s2, s2) = đúng &lt;=&gt;{' '}\r\n            <code>(beta ^ s1) * (s1 ^ s2) mod p = alpha ^ x mod p</code>\r\n          </b>\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <p>\r\n          <b>(beta ^ s1) * (s1 ^ s2) mod p = </b>({beta} ^ {s1}) * ({s1} ^ {s2})\r\n          mod {p} = {VT}\r\n        </p>\r\n        <p>\r\n          <b>alpha ^ x mod p = </b> {alpha} ^ {x} mod {p} = {VP}\r\n        </p>\r\n      </div>\r\n\r\n      {check ? (\r\n        <h4 className='text-danger'>\r\n          <b>Chữ ký hợp lệ</b>\r\n        </h4>\r\n      ) : (\r\n        <h4 className='text-danger'>\r\n          <b>Chữ ký không hợp lệ</b>\r\n        </h4>\r\n      )}\r\n      <hr />\r\n      <Button onClick={reset}>Clear All</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignCheckElgamal;\r\n","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\elliptic\\Elliptic.tsx",[],"C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\elgamal\\EncryptElgamal.tsx",["86"],"import { Button, Input, Space } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport bigInt from 'big-integer';\r\n\r\nconst EncryptElgamal = () => {\r\n  const [x, setX] = useState<any>();\r\n  const [p, setP] = useState<any>();\r\n  const [k, setK] = useState<any>();\r\n  const [alpha, setAlpha] = useState<any>();\r\n  const [beta, setBeta] = useState<any>();\r\n  const [gamma, setGamma] = useState<any>();\r\n  const [delta, setDelta] = useState<any>();\r\n\r\n  const reset = () => {\r\n    setP('');\r\n    setK('');\r\n    setX('');\r\n    setAlpha('');\r\n  };\r\n\r\n  const autoFill = () => {\r\n    setX('134542481841787419');\r\n    setP('1000000000000000009');\r\n    setK('7531594862');\r\n    setAlpha('7');\r\n    setBeta('609914260072147340');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!(alpha && k && p)) {\r\n      return;\r\n    }\r\n    setGamma(bigInt(alpha).modPow(k, p).toString());\r\n  }, [alpha, k, p]);\r\n\r\n  useEffect(() => {\r\n    if (!(beta && k && p && x)) {\r\n      return;\r\n    }\r\n    setDelta(\r\n      bigInt(beta)\r\n        .modPow(k, p)\r\n        .multiply(bigInt(x).modPow(1, p))\r\n        .modPow(1, p)\r\n        .toString()\r\n    );\r\n  }, [beta, k, p, x]);\r\n\r\n  return (\r\n    <div>\r\n      <h3 className='mb-4'>\r\n        <b>Mã hóa Elgamal</b>\r\n      </h3>\r\n      <hr />\r\n      <Space className='w-100' direction='vertical' size='large'>\r\n        <Input\r\n          value={x}\r\n          onChange={(e) => setX(e.target.value)}\r\n          addonBefore='x'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={alpha}\r\n          onChange={(e) => setAlpha(e.target.value)}\r\n          addonBefore='α'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={beta}\r\n          onChange={(e) => setBeta(e.target.value)}\r\n          addonBefore='β'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={p}\r\n          onChange={(e) => setP(e.target.value)}\r\n          addonBefore='p'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={k}\r\n          onChange={(e) => setK(e.target.value)}\r\n          addonBefore='k'\r\n          type='number'\r\n        />\r\n      </Space>\r\n      <hr />\r\n\r\n      <Space direction='vertical'>\r\n        <div>\r\n          <b>Bản rõ x = {x || ''}</b>\r\n        </div>\r\n        <div>\r\n          <b>p = {p || ''}</b>\r\n        </div>\r\n        <div>\r\n          <b>β = {beta || ''}</b>\r\n        </div>\r\n        <div>\r\n          <b>k = {k || ''}</b>\r\n        </div>\r\n        <div>\r\n          <b>alpha = {alpha || ''}</b>\r\n        </div>\r\n      </Space>\r\n      <hr />\r\n\r\n      <div>\r\n        <p>\r\n          γ = α^k mod p = {alpha} ^ {k} mod {p} = {gamma}\r\n        </p>\r\n        <p>\r\n          δ = x * β ^ K mod p = {x} * {beta} ^ {k} mod {p} = {delta}\r\n        </p>\r\n        <h4 className='text-danger'>\r\n          <b>\r\n            Nhận được bản mã (γ,δ) = ({gamma} , {delta})\r\n          </b>\r\n        </h4>\r\n      </div>\r\n      <hr />\r\n      <Button onClick={reset}>Clear All</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EncryptElgamal;\r\n","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\elgamal\\SignElgamal.tsx",["87"],"import { Button, Input, Space } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { mod } from '../utils/extendedEuclid';\r\nimport bigInt from 'big-integer';\r\n\r\nconst SignElgama = () => {\r\n  const [x, setX] = useState<any>();\r\n  const [p, setP] = useState<any>();\r\n  const [a, setA] = useState<any>();\r\n  const [k, setK] = useState<any>();\r\n  const [alpha, setAlpha] = useState<any>();\r\n  const [beta, setBeta] = useState<any>();\r\n  const [ed, setED] = useState<any>();\r\n  const [ed2, setED2] = useState<any>();\r\n  const [s1, setS1] = useState<any>();\r\n  const [s2, setS2] = useState<any>();\r\n\r\n  const reset = () => {\r\n    setA('');\r\n    setX('');\r\n    setP('');\r\n    setK('');\r\n    setAlpha('');\r\n    setBeta('');\r\n    setED('');\r\n    setS1('');\r\n    setS2('');\r\n  };\r\n\r\n  const autoFill = () => {\r\n    setX('2035');\r\n    setP('2357');\r\n    setA('1751');\r\n    setK('1523');\r\n    setAlpha('2');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!(alpha && a && p)) {\r\n      return;\r\n    }\r\n    setBeta(bigInt(alpha).modPow(a, p).toString());\r\n  }, [alpha, a, p]);\r\n\r\n  useEffect(() => {\r\n    if (!(k && p)) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setED(\r\n        bigInt(k)\r\n          .modInv(p - 1)\r\n          .toString()\r\n      );\r\n    } catch (error) {}\r\n  }, [k, p]);\r\n\r\n  useEffect(() => {\r\n    if (!(alpha && k && p)) {\r\n      return;\r\n    }\r\n    try {\r\n      setS1(bigInt(alpha).modPow(k, p).toString());\r\n    } catch (error) {}\r\n  }, [alpha, k, p]);\r\n\r\n  useEffect(() => {\r\n    if (!(x && a && s1 && p)) {\r\n      return;\r\n    }\r\n    try {\r\n      setED2(mod(x - a * s1, p - 1).toString());\r\n    } catch (error) {}\r\n  }, [a, p, s1, x]);\r\n\r\n  useEffect(() => {\r\n    if (!(ed2 && k && p)) {\r\n      return;\r\n    }\r\n    try {\r\n      setS2(\r\n        bigInt(k)\r\n          .modInv(p - 1)\r\n          .multiply(ed2)\r\n          .mod(p - 1)\r\n          .toString()\r\n      );\r\n    } catch (error) {}\r\n  }, [ed2, k, p]);\r\n\r\n  return (\r\n    <div>\r\n      <h3 className='mb-4'>\r\n        <b>Ký văn bản X bằng hệ mật Elgamal</b>\r\n      </h3>\r\n      <hr />\r\n      <Space className='w-100' direction='vertical' size='large'>\r\n        <Input\r\n          value={x}\r\n          onChange={(e) => setX(e.target.value)}\r\n          addonBefore='x'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={p}\r\n          onChange={(e) => setP(e.target.value)}\r\n          addonBefore='p'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={a}\r\n          onChange={(e) => setA(e.target.value)}\r\n          addonBefore='a'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={k}\r\n          onChange={(e) => setK(e.target.value)}\r\n          addonBefore='k'\r\n          type='number'\r\n        />\r\n        <Input\r\n          value={alpha}\r\n          onChange={(e) => setAlpha(e.target.value)}\r\n          addonBefore='alpha'\r\n          type='number'\r\n        />\r\n      </Space>\r\n      <hr />\r\n      <p>\r\n        <b>Bản rõ x = {x || ''}</b>\r\n      </p>\r\n      <p>\r\n        <b>Phần tử nguyên thủy: alpha = </b>\r\n        {alpha}\r\n      </p>\r\n      <p>\r\n        <b>Cặp khóa công khai để kiểm tra chữ ký: (alpha, beta, p) = </b> (\r\n        {alpha} , {beta} , {p})\r\n      </p>\r\n      <p>\r\n        <b>Cặp khóa bí mật để ký: (a, k) = </b> ({a} , {k})\r\n      </p>\r\n      <p>\r\n        <b>s1= </b> {s1}\r\n      </p>\r\n      <p>\r\n        <b>egcd(k, p - 1) mod p - 1 = </b> {ed}\r\n      </p>\r\n      <p>\r\n        <b>(x - a * s) mod p - 1 = </b> {ed2}\r\n      </p>\r\n      <p>\r\n        <b>(s1,s2) =(alpha ^ k mod p, (x - a * s1) * (k ^ -1) = </b> ({s1} ,{' '}\r\n        {s2})\r\n      </p>\r\n\r\n      <hr />\r\n      {s1 && s2 && (\r\n        <h4 className='text-danger'>\r\n          =&gt; Chữ ký trên x: (s1,s2) = ({s1} , {s2})\r\n        </h4>\r\n      )}\r\n      <Button onClick={reset}>Clear All</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignElgama;\r\n","C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\utils\\elliptic.js",[],["88","89"],"C:\\Users\\Manh\\Documents\\Github\\nmattt\\src\\utils\\extendedEuclid.ts",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":3,"column":18,"nodeType":"96","messageId":"97","endLine":3,"endColumn":22},{"ruleId":"94","severity":1,"message":"98","line":3,"column":24,"nodeType":"96","messageId":"97","endLine":3,"endColumn":34},{"ruleId":"94","severity":1,"message":"99","line":3,"column":36,"nodeType":"96","messageId":"97","endLine":3,"endColumn":39},{"ruleId":"94","severity":1,"message":"100","line":15,"column":9,"nodeType":"96","messageId":"97","endLine":15,"endColumn":15},{"ruleId":"94","severity":1,"message":"101","line":15,"column":26,"nodeType":"96","messageId":"97","endLine":15,"endColumn":31},{"ruleId":"94","severity":1,"message":"102","line":18,"column":9,"nodeType":"96","messageId":"97","endLine":18,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":27,"column":47,"nodeType":"105","messageId":"106","endLine":27,"endColumn":50},{"ruleId":"103","severity":1,"message":"104","line":31,"column":47,"nodeType":"105","messageId":"106","endLine":31,"endColumn":50},{"ruleId":"103","severity":1,"message":"104","line":35,"column":47,"nodeType":"105","messageId":"106","endLine":35,"endColumn":50},{"ruleId":"103","severity":1,"message":"104","line":39,"column":47,"nodeType":"105","messageId":"106","endLine":39,"endColumn":50},{"ruleId":"103","severity":1,"message":"104","line":43,"column":47,"nodeType":"105","messageId":"106","endLine":43,"endColumn":50},{"ruleId":"103","severity":1,"message":"104","line":46,"column":47,"nodeType":"105","messageId":"106","endLine":46,"endColumn":50},{"ruleId":"103","severity":1,"message":"104","line":49,"column":47,"nodeType":"105","messageId":"106","endLine":49,"endColumn":50},{"ruleId":"103","severity":1,"message":"104","line":52,"column":47,"nodeType":"105","messageId":"106","endLine":52,"endColumn":50},{"ruleId":"103","severity":1,"message":"104","line":56,"column":37,"nodeType":"105","messageId":"106","endLine":56,"endColumn":40},{"ruleId":"94","severity":1,"message":"107","line":29,"column":9,"nodeType":"96","messageId":"97","endLine":29,"endColumn":17},{"ruleId":"94","severity":1,"message":"107","line":84,"column":9,"nodeType":"96","messageId":"97","endLine":84,"endColumn":17},{"ruleId":"94","severity":1,"message":"107","line":27,"column":9,"nodeType":"96","messageId":"97","endLine":27,"endColumn":17},{"ruleId":"94","severity":1,"message":"107","line":64,"column":9,"nodeType":"96","messageId":"97","endLine":64,"endColumn":17},{"ruleId":"94","severity":1,"message":"107","line":21,"column":9,"nodeType":"96","messageId":"97","endLine":21,"endColumn":17},{"ruleId":"94","severity":1,"message":"107","line":30,"column":9,"nodeType":"96","messageId":"97","endLine":30,"endColumn":17},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"@typescript-eslint/no-unused-vars","'Menu' is defined but never used.","Identifier","unusedVar","'Breadcrumb' is defined but never used.","'Row' is defined but never used.","'Header' is assigned a value but never used.","'Sider' is assigned a value but never used.","'location' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'autoFill' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]